version: 2.1

executors:
  node_executor:
    docker:
      - image: cimg/node:18.17
    working_directory: ~/project
    environment:
      NODE_MODULES_CHECK_PATH: node_modules
      DIST_FOLDER: dist
      GITHUB_API_BASE: https://api.github.com/repos/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME

  bun_executor:
    docker:
      - image: oven/bun:latest
    working_directory: ~/project

commands:
  checkout_code:
    description: "Checkout code from GitHub"
    steps:
      - checkout
      - run:
          name: Set Git Commit SHA
          command: |
            echo "export GIT_COMMIT=$CIRCLE_SHA1" >> $BASH_ENV
            echo "export CIRCLE_PROJECT_USERNAME=$CIRCLE_PROJECT_USERNAME" >> $BASH_ENV
            echo "export CIRCLE_PROJECT_REPONAME=$CIRCLE_PROJECT_REPONAME" >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Log Branch and Commit
          command: |
            echo "Username: $CIRCLE_PROJECT_USERNAME"
            echo "Reponame: $CIRCLE_PROJECT_REPONAME"
            echo "Commit: $GIT_COMMIT"
      - persist_to_workspace:
          root: .
          paths:
            - node_modules
            - bun.lockb
            - package.json


  install_curl:
    steps:
      - run:
          name: Install curl
          command: |
            if command -v apk >/dev/null 2>&1; then
              apk add --no-cache curl
            elif command -v apt-get >/dev/null 2>&1; then
              apt-get update && apt-get install -y curl
            else
              echo "No supported package manager found (apk or apt-get)"
              exit 1
            fi

  notify_github:
    description: "Notify GitHub with status"
    parameters:
      status:
        type: string
      description:
        type: string
    steps:
      - run:
          name: Send GitHub Status
          command: |
            echo "Username: ${CIRCLE_PROJECT_USERNAME}"
            echo "Reponame: ${CIRCLE_PROJECT_REPONAME}"
            echo "Commit: ${CIRCLE_SHA1}"

            # Reemplazar espacios con guiones si tu repo se llama "Test Terra"
            REPO_NAME_SANITIZED=$(echo "${CIRCLE_PROJECT_REPONAME}" | sed 's/ /-/g')

            curl -X POST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              "https://api.github.com/repos/${CIRCLE_PROJECT_USERNAME}/${REPO_NAME_SANITIZED}/statuses/${CIRCLE_SHA1}" \
              -d "{\"state\": \"<< parameters.status >>\", \"description\": \"<< parameters.description >>\", \"context\": \"CI/CD\", \"target_url\": \"$CIRCLE_BUILD_URL\"}"

jobs:
  clone_repository:
    executor: node_executor
    steps:
      - checkout_code
      - run:
          name: Save Commit SHA
          command: echo $CIRCLE_SHA1 > .commit_sha
      - persist_to_workspace:
          root: .
          paths:
            - .commit_sha

  check_bun_version:
    executor: bun_executor
    steps:
      - checkout_code
      - run: bun --version

  install_dependencies:
    executor: bun_executor
    steps:
      - checkout_code
      - run:
          name: Install Dependencies
          command: |
            rm -rf node_modules
            rm -f bun.lockb
            bun install
      - persist_to_workspace:
          root: .
          paths:
            - node_modules
            - bun.lockb
            - package.json

  run_unit_tests:
    executor: node_executor
    steps:
      - checkout_code
      - run: npm ci
      - run:
          name: Run Jest Tests with Coverage
          command: |
            mkdir -p test-results/jest
            mkdir -p coverage
            npx jest --ci --coverage --reporters=default --reporters=jest-junit --outputFile=test-results/jest/results.xml
      - store_test_results:
          path: test-results
      - store_artifacts:
          path: coverage
      - when:
          condition: on_fail
          steps:
            - notify_github:
                status: failure
                description: "‚ùå Unit tests failed"

  code_quality_analysis:
    executor: node_executor
    steps:
      - checkout_code
      - attach_workspace:
          at: .
      - run:
          name: Code Quality Analysis
          command: |
            echo "Running lint..."
            npm run lint || echo "‚ö† Linting issues found"
      - store_artifacts:
          path: eslint-report.xml

  build_application:
    executor: node_executor
    steps:
      - checkout_code
      - attach_workspace:
          at: .
      - run:
          name: Build Application
          command: npm run build
      - persist_to_workspace:
          root: .
          paths:
            - dist
      - when:
          condition: on_fail
          steps:
            - notify_github:
                status: failure
                description: "‚ùå Build failed"


  deploy_to_production:
    executor: node_executor
    steps:
      - checkout_code
      - attach_workspace:
          at: .
      - run:
          name: Check dist folder
          command: |
            if [ -d dist ]; then
              echo "dist folder ready"
            else
              echo "dist folder not found"
              exit 1
            fi
      - store_artifacts:
          path: dist
          destination: deploy-output
      - run:
          name: Log Deployment
          command: touch /tmp/deploy_success
      - when:
          condition: on_fail
          steps:
            - notify_github:
                status: failure
                description: "‚ùå Deployment failed"


  post_notifications:
    executor: node_executor
    steps:
      - attach_workspace:
          at: .
      - run:
          name: Load Commit SHA
          command: |
            export GIT_COMMIT=$(cat .commit_sha)
            echo "export GIT_COMMIT=$GIT_COMMIT" >> $BASH_ENV
            source $BASH_ENV
      - run:
          name: Send GitHub Notification
          command: |
            echo "üîç Verificando variables de entorno necesarias..."
            if [ -z "$GITHUB_TOKEN" ] || [ -z "$CIRCLE_PROJECT_USERNAME" ] || [ -z "$CIRCLE_PROJECT_REPONAME" ] || [ -z "$GIT_COMMIT" ]; then
              echo "‚ùå Missing required environment variables. Aborting GitHub notification."
              echo "GITHUB_TOKEN: ${GITHUB_TOKEN:+set}"
              echo "CIRCLE_PROJECT_USERNAME: ${CIRCLE_PROJECT_USERNAME:-missing}"
              echo "CIRCLE_PROJECT_REPONAME: ${CIRCLE_PROJECT_REPONAME:-missing}"
              echo "GIT_COMMIT: ${GIT_COMMIT:-missing}"
              exit 1
            fi

            echo "‚úÖ Variables de entorno definidas"
            echo "üîÅ Enviando estado a GitHub"

            STATUS="failure"
            DESCRIPTION="‚ùå Pipeline failed"
            if [ -f /tmp/deploy_success ]; then
              STATUS="success"
              DESCRIPTION="‚úÖ Build passed from CircleCI"
            fi

            curl -X POST \
              -H "Authorization: token $GITHUB_TOKEN" \
              -H "Accept: application/vnd.github.v3+json" \
              https://api.github.com/repos/$CIRCLE_PROJECT_USERNAME/$CIRCLE_PROJECT_REPONAME/statuses/$GIT_COMMIT \
              -d "{\"state\": \"$STATUS\", \"description\": \"$DESCRIPTION\", \"context\": \"CI/CD\", \"target_url\": \"$CIRCLE_BUILD_URL\"}"

workflows:
  build_test_deploy:
    jobs:
      - clone_repository:
          filters:
            branches:
              only: main
      - check_bun_version:
          requires:
            - clone_repository
          filters:
            branches:
              only: main
      - install_dependencies:
          requires:
            - check_bun_version
          filters:
            branches:
              only: main
      - run_unit_tests:
          requires:
            - install_dependencies
          filters:
            branches:
              only: main
      - code_quality_analysis:
          requires:
            - install_dependencies
          filters:
            branches:
              only: main
      - build_application:
          requires:
            - run_unit_tests
            - code_quality_analysis
          filters:
            branches:
              only: main
      - deploy_to_production:
          requires:
            - build_application
          filters:
            branches:
              only: main
      - post_notifications:
          requires:
            - deploy_to_production
          filters:
            branches:
              only: main
